@model Trash_Collector.Models.Employee

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>


<style>
    /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
    #map {
        height: 400px;
        width: 700px;
    }
</style>

<div class="row">
    <div id="map"></div>
    <script>
        var map;
        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: -34.397, lng: 150.644 },
                zoom: 8
            });
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD4h1BTPCjnx1hixVsfecgYfvA8-dq4RhU&callback=initMap"
            async defer></script>
</div>



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Employee</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <body>
            <div>
                <table>
                    <tr>
                        <td>
                        <th>Customer Pickups Today</th>
                        <th>@ViewBag.PickUps</th>
                        <th>@Html.CheckBoxFor(m => m.ConfirmPickup)</th>
                        </td>
                    </tr>
                    @*@for (int i = 0; i < Model.PickUpThisDay.Count; i++)
                        {
                            @Html.HiddenFor(m=> m.PickUpThisDay[i])
                            <tr>
                                <td>@Html.DisplayFor(m => m.PickUpThisDay[i])</td>
                                <td>@Html.CheckBoxFor(m=> m.ConfirmPickup)</td>
                            </tr>
                        }*@
                </table>

            </div>

            <div>

                @Html.HiddenFor(model => model.CurrentDate, new { @Value = DateTime.Now.ToString("dd-MM-yyyy") })

            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Zipcode, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Zipcode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Zipcode, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ConfirmPickup, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ConfirmPickup, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ConfirmPickup, "", new { @class = "text-danger" })
                    @Html.ActionLink("Confirm Pickup", "Index")
                </div>
            </div>


            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </body>
    </div>


}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
